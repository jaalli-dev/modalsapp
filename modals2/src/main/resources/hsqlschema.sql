--set database sql syntax pgs true
-- do not add data if it is already added.

CREATE SEQUENCE IF NOT EXISTS seq1 AS INTEGER START WITH 9;
CREATE SEQUENCE IF NOT EXISTS seq2 AS INTEGER START WITH 4;
CREATE SEQUENCE IF NOT EXISTS seq3 AS INTEGER START WITH 6;

CREATE TABLE IF NOT EXISTS SalesItem (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(31) NOT NULL,
    text VARCHAR(255) NOT NULL,
    price FLOAT,
    date_val DATE NOT NULL
);

MERGE INTO SalesItem
USING (VALUES 1) data (id) ON (SalesItem.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (1, 'Bananas', 'From Columbia', 1,  DATE '2021-05-01');

MERGE INTO SalesItem
USING (VALUES 2) data (id) ON (SalesItem.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (2, 'Mangos', 'From Thailand', 3,  DATE '2021-04-01');

MERGE INTO SalesItem
USING (VALUES 3) data (id) ON (SalesItem.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (3, 'Kiwis', 'From LAV', 5,  DATE '2021-03-01');

MERGE INTO SalesItem
USING (VALUES 4) data (id) ON (SalesItem.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (4, 'Oranges', 'From Morocco', 3,  DATE '2021-02-01');

MERGE INTO SalesItem
USING (VALUES 5) data (id) ON (SalesItem.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (5, 'Apples', 'From Poland', 2,  DATE '2021-01-01');

MERGE INTO SalesItem
USING (VALUES 6) data (id) ON (SalesItem.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (6, 'Figs', 'From Greece', 7,  DATE '2020-12-01');

MERGE INTO SalesItem
USING (VALUES 7) data (id) ON (SalesItem.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (7, 'Coconuts', 'From Indonesia', 4,  DATE '2020-11-01');

MERGE INTO SalesItem
USING (VALUES 8) data (id) ON (SalesItem.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (8, 'Lotuses', 'From Vietnam', 9,  DATE '2020-10-01');



CREATE TABLE IF NOT EXISTS Filter (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL
);

MERGE INTO Filter
USING (VALUES 1) data (id) ON (Filter.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (1, 'Filter 1');

MERGE INTO Filter
USING (VALUES 2) data (id) ON (Filter.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (2, 'Filter 2');

MERGE INTO Filter
USING (VALUES 3) data (id) ON (Filter.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (3, 'Filter 3');


CREATE TABLE IF NOT EXISTS SubFilter (
     filter_id BIGINT FOREIGN KEY REFERENCES Filter,
     id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
     filter_type INTEGER,
     text VARCHAR(255) DEFAULT '',
     date_val DATE
);

MERGE INTO SubFilter
USING (VALUES 1) data (id) ON (SubFilter.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (1, 1, 1, 'Bana', null);

MERGE INTO SubFilter
USING (VALUES 2) data (id) ON (SubFilter.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (1, 2, 1, 'nana', null);

MERGE INTO SubFilter
USING (VALUES 3) data (id) ON (SubFilter.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (1, 3, 2, 'Col', null);

MERGE INTO SubFilter
USING (VALUES 4) data (id) ON (SubFilter.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (2, 4, 11, ' ', '2021-03-17');

MERGE INTO SubFilter
USING (VALUES 5) data (id) ON (SubFilter.id = data.id)
WHEN NOT MATCHED THEN INSERT VALUES (3, 5, 10, '10', null);
